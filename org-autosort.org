#+AUTHORS: yantar92
#+EMAIL: yantar92@gmail.com
#+OPTIONS: tags:nil todo:nil num:nil
#+PROPERTY: header-args+ :tangle no

* NEXT Automatic sorting of items in org mode                        :COMMON:
:PROPERTIES:
:ORG-TIME-BALANCE-MULTIPLIER: -0.2
:END:
:LOGBOOK:
CLOCK: [2018-09-20 Thu 15:53]--[2018-09-20 Thu 15:56] =>  0:03
CLOCK: [2018-09-20 Thu 14:47]--[2018-09-20 Thu 15:31] =>  0:44
- State "NEXT"       from "NEXT"       [2018-01-01 Mon 13:31]
- State "NEXT"       from "NEXT"       [2018-01-01 Mon 13:21]
CLOCK: [2017-12-25 Mon 21:58]--[2017-12-25 Mon 22:00] =>  0:02
:END:
** Motivation
:PROPERTIES:
:END:
Org-mode has many useful commands for sorting entries in the agenda. 
However, sorting of the actual org files is
rather limited. We only have =org-sort=, which can sort
by a single criteria, unlike =org-agenda-sorting-strategy=, where one can 
setup a complicated sorting strategy. 

Sometimes, one may have a need to look at some kind of long list of
TODO items (for example, this infinitely growing list of things you
wish to do one day, or list of ideas). It is not comfortable to scroll
across such kind of list to look for specific item. Sorting is
something, that can help here.

*************** TODO Add some example here              :NOEXPORT:
*************** END

Of course, you can still use =org-sort= or agenda view with restriction
to the current subtree, but it may be disrupting if you want to look
through multiple of such a lists.  

The solution is to implement automatic sorting of subtrees in org
files.

** Overview

This package aims to implement an automatic sorting of the subtrees
in org files. The sorting order can be set globally through all the
org files, locally in file, or locally in a subtree using =:SORT:=
property.  

Everything, except global sorting order, can be set using standard
inheritance capabilities of the org properties (file local, subtree
local with or without inheritance for subtrees inside the
subtree). Global sorting order can be set via
=org-autosort-global-sorting-strategy= variable.

** Configuration
:PROPERTIES:
:END:

Both =:SORT:= property and =org-autosort-global-sorting-strategy=
are lists, which determine how to sort the entries.

<<org-autosort-global-sorting-strategy>>
=org-autosort-global-sorting-strategy= defines how to sort entries by
default. It is a list of [[sorting rules][sorting rules]], defining the comparison
between sorted entries. First, the entries are sorted via first rule
from the list. If the calculated keys are equal, second rule is used,
and so on.

=:SORT:= can be either =nil=, =t=, or the same format as
=org-autosort-global-sorting-strategy=:
- =t= :: use =org-autosort-global-sorting-strategy=
- not defined or =nil= :: sort if =org-autosort-sort-all= is non =nil=
- empty or =none= :: do not sort entries
- list :: define separate sorting strategy 

The sorting can be done after:
- opening the org file
- =org-autosort-sort-entries-at-point= command
- =org-autosort-sort-entries-in-file= command
(see [[sorting triggers][sorting triggers]] for details)

** Defaults
:PROPERTIES:
:CREATED:  [2017-12-25 Mon 16:06]
:END:
The package provide some predefined sorting rules <<sorting rules>>,
all are listed in =org-autosort-functions-alist=.

#+begin_src emacs-lisp :noweb yes
<<autosort-functions>>
#+end_src

You can control automatic sorting by setting <<sorting triggers>>

#+BEGIN_SRC elisp :noweb yes
<<autosort-triggers>>
#+END_SRC

Default [[org-autosort-global-sorting-strategy][sorting strategy]] is

#+BEGIN_SRC elisp :noweb yes
<<autosort-default-strategy>>
#+END_SRC

** NEXT Implementation                                     :NOEXPORT:NOARCHIVE:
:PROPERTIES:
:header-args+: :tangle yes 
:MODIFIED: 2018-03-14 10:38
:END:
:LOGBOOK:
CLOCK: [2017-12-10 Sun 17:36]--[2017-12-10 Sun 20:02] =>  2:26
CLOCK: [2017-12-10 Sun 10:21]--[2017-12-10 Sun 11:02] =>  0:41
:END:
*** DONE Header
CLOSED: [2017-12-11 Mon 15:58]
:PROPERTIES:
:ID:       3e603efc-e71a-4520-bcef-265cff481455
:END:
- Here I use =:comments no= to make sure that the comment does not appear at the beginning of the file, which would prevent lexical binding from being activated.
#+begin_src emacs-lisp :comments no
;;; org-autosort.el --- Sort entries in org files automatically -*- lexical-binding: t; -*-

;; Copyright (C) 2017-2019 Ihor Radchenko

;; Version: 0.11
;; Author: Ihor Radchenko <yantar92@gmail.com>
;; Created: 10 Dec 2017
;; Keywords: matching, outlines
;; Homepage: https://github.com/yantar92/org-autosort
;; Package-Requires: (org)

;; This file is not part of GNU Emacs.

;;
;; This program is free software; you can redistribute it and/or
;; modify it under the terms of the GNU General Public License as
;; published by the Free Software Foundation; either version 2, or
;; (at your option) any later version.
;;
;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
;; General Public License for more details.
;;

;;; Commentary:

;; This package aims to implement an automatic sorting of the subtrees in org files.
;; The sorting order can be set globally through all the org files, locally in file, or locally in a subtree using :SORT: property.

;;; Code:
#+end_src
*** DONE Custom variables
CLOSED: [2017-12-18 Mon 21:23]
:PROPERTIES:
:ID:       08e58824-f88a-4d3b-a79e-00a1514eb68a
:END:
:LOGBOOK:
CLOCK: [2017-12-10 Sun 17:13]--[2017-12-10 Sun 17:33] =>  0:20
CLOCK: [2017-12-10 Sun 11:03]--[2017-12-10 Sun 11:35] =>  0:32
CLOCK: [2017-12-10 Sun 11:02]--[2017-12-10 Sun 11:03] =>  0:01
:END:
#+begin_src emacs-lisp
(defgroup org-autosort nil
  "Customization options of org-autosort package.")
#+end_src
- to sort or not to sort
#+begin_src emacs-lisp
(defcustom org-autosort-sort-all nil
  "Sort entries if :SORT: property is not defined.")
#+end_src
- auto sort triggers
#+name: autosort-triggers
#+begin_src emacs-lisp
(defcustom org-autosort-sort-at-file-open t
  "Non nil states for sorting of all items in the org file after opening."
  :type '(boolean))
#+end_src
- predefined sorts
#+name: autosort-functions
#+begin_src emacs-lisp
(defcustom org-autosort-functions-alist '((todo-up-0 . (:key org-autosort-get-todo :cmp <)) ; default org-sort comparison
					  (todo-down-0 . (:key org-autosort-get-todo :cmp >))
					  ;; compare according to `org-autosort-todo-cmp-order'
					  (todo-up . (:key org-get-todo-state :cmp org-autosort-custom-cmp-todo))
					  (todo-down . (:key org-get-todo-state :cmp (lambda (a b)
										       (not (org-autosort-custom-cmp-todo a b)))))
					  ;;					  
					  (text-up . (:key org-autosort-get-text :cmp string<))
					  (text-down . (:key org-autosort-get-text :cmp string>))
                                          (priority-up . (:key (org-autosort-get-property "PRIORITY") :cmp string<))
                                          (priority-down . (:key (org-autosort-get-property "PRIORITY") :cmp string>))
                                          (inactive-timestamp-up . (:key org-autosort-get-inactive-timestamp :cmp time-less-p))
					  (inactive-timestamp-down . (:key org-autosort-get-inactive-timestamp :cmp (lambda (a b) (time-less-p b a)))))
  "Alist, defining aliases to sorting rules.
Each value in the list defines a sorting rule.
The rule is a property list with :key and :cmp properties.

:key property defines a function to calculate the key value.
:cmp property defines a function to compare the keys.
In both cases, function can be defined as
 1. lambda expression
 2. function symbol
 3. list, containing function symbol or lambda expression and their arguments

:key function is called with pos at the entry, without arguments.
If :key is defined as in 3, all the nesessary arguments should be in the list.

:cmp function must accept two arguments (after all the arguments as in 3).
It must satisfy the rules of cmp function for `sort'.
If :cmp is omitted, `org-autosort-default-cmp-function' is used."
  :type '(alist :key-type symbol
		:value-type (plist :value-type (choise function
						       (list function (repeat sexp))))))

(defcustom org-autosort-default-cmp-function #'string<
  "Default function, used to compare two entry keys.
Can be also a list of function and its arguments.
It is used if cmp function is not defined.
It must accept two arguments - first and second sorting key to compare.
Non nil return value means that first key is lesser than second key."
  :type '(function))
#+end_src
- default sorting strategy
#+name: autosort-default-strategy
#+begin_src emacs-lisp
(defcustom org-autosort-global-sorting-strategy '(priority-down todo-up)
  "Sorting strategy, used to sort entries with :SORT: property not set or nil.
This is a list, which elements can be:
- key of the sorting rule from `org-autosort-functions-alist'
- sorting rule, defined as in `org-autosort-functions-alist'
- :key values as from `org-autosort-functions-alist'
Sorting rules are applied accorting the their position in the list.
nil means that no sorting should be done by default."
  :type '(choice symbol
		 (plist :value-type (choise function
					    (list function (repeat sexp))))))
#+end_src
*** NEXT Standard sorting functions
:PROPERTIES:
:ID:       c478d941-ddbf-49cc-b38c-a03c33779817
:END:
:LOGBOOK:
CLOCK: [2018-10-07 Sun 16:30]--[2018-10-07 Sun 16:31] =>  0:01
CLOCK: [2018-09-20 Thu 14:44]--[2018-09-20 Thu 14:46] =>  0:02
CLOCK: [2017-12-18 Mon 20:59]--[2017-12-18 Mon 21:21] =>  0:22
CLOCK: [2017-12-10 Sun 17:08]--[2017-12-10 Sun 17:13] =>  0:05
:END:
**** DONE by property
CLOSED: [2018-09-20 Thu 14:46]
:PROPERTIES:
:ID:       51552471-6f2b-4792-a8a3-b4bb0d3618d8
:END:
:LOGBOOK:
- State "DONE"       from "NEXT"       [2018-09-20 Thu 14:46]
:END:
#+begin_src emacs-lisp 
(defun org-autosort-get-property (property)
  "Get the value of PROPERTY for sorting."
  (org-entry-get (point) property 'selective))
#+end_src
**** DONE By todo keyword
CLOSED: [2018-09-20 Thu 14:45]
:PROPERTIES:
:ID:       0d4d78c1-a4a2-4091-8142-ea9e70434d73
:END:
:LOGBOOK:
- State "DONE"       from "NEXT"       [2018-09-20 Thu 14:45]
:END:
#+begin_src emacs-lisp 
(defun org-autosort-get-todo ()
  "Get the value of todo keyword for sorting." ; stolen from org-sort-entries in org.el
  (let* ((m (org-get-todo-state))
	 (s (if (member m org-done-keywords)
		'- '+)))
    (- 99 (funcall s
		   (length (member m org-todo-keywords-1))))))
#+end_src
**** DONE By todo keyword, custom
CLOSED: [2018-09-20 Thu 14:45]
:PROPERTIES:
:ID:       87e5b164-fe1f-4618-9b07-741c27e37bc0
:END:
:LOGBOOK:
- State "DONE"       from "NEXT"       [2018-09-20 Thu 14:45]
:END:
#+BEGIN_SRC emacs-lisp
(defvar org-autosort-todo-cmp-order nil
  "Order of todo keywords to be shown in sorted subtrees.
       Follow `org-todo-keywords-1' if nil."
  )
(defun org-autosort-custom-cmp-todo (a b)
  "Compare todo keywords A and B.  Return non nil if A<B."
  (let* ((todo-cmp-orgder (or org-autosort-todo-cmp-order
			      org-todo-keywords-1))
	 (posa (or (seq-position org-autosort-todo-cmp-order a)
		   0))
	 (posb (or (seq-position org-autosort-todo-cmp-order b)
		   0)))
    (< posa posb)))
#+END_SRC
**** DONE Alphabetic
CLOSED: [2018-09-20 Thu 14:44] SCHEDULED: <2017-12-12 Tue>
:PROPERTIES:
:ID:       5205ed5d-cb92-4711-86b7-c2bf9549f0f5
:END:
:LOGBOOK:
- State "DONE"       from "NEXT"       [2018-09-20 Thu 14:44]
CLOCK: [2018-09-20 Thu 14:41]--[2018-09-20 Thu 14:44] =>  0:03
CLOCK: [2017-12-18 Mon 20:33]--[2017-12-18 Mon 20:50] =>  0:17
:END:
#+BEGIN_SRC emacs-lisp
(defun org-autosort-get-text ()
  "Get the text or tags (if text is empty) of the current entry."
  (nth 4 (org-heading-components)))
#+END_SRC
**** DONE By first inactive timestamp
CLOSED: [2018-10-07 Sun 16:30] SCHEDULED: <2018-09-21 Fri>
:PROPERTIES:
:SHOWFROMDATE: 2018-09-21 18:00
:ID:       46525723-2950-4cf9-9f84-12cd9ee8f67e
:END:
:LOGBOOK:
- State "DONE"       from "NEXT"       [2018-10-07 Sun 16:30]
CLOCK: [2018-10-07 Sun 15:40]--[2018-10-07 Sun 16:30] =>  0:50
- State "NEXT"       from "TODO"       [2018-09-20 Thu 14:51]
:END:
#+BEGIN_SRC emacs-lisp
(defun org-autosort-get-inactive-timestamp ()
  "Get the first inactive timestamp of the entry."
  (when (re-search-forward (org-re-timestamp 'inactive) (save-excursion
							  (outline-next-heading))
			   't)
    (goto-char (match-beginning 0))
    (let* ((timestamp (cadr (org-element-timestamp-parser)))
	   (year (plist-get timestamp :year-start))
           (month (plist-get timestamp :month-start))
           (day (plist-get timestamp :day-start))
           (hour (plist-get timestamp :hour-start))
           (minute (plist-get timestamp :minute-start)))
      (encode-time 0 (or minute 0) (or hour 0) day month year))))
#+END_SRC
**** NEXT By deadline
SCHEDULED: <2019-02-02 Sat>
:PROPERTIES:
:END:
:LOGBOOK:
- State "NEXT"       from "TODO"       [2018-10-08 Mon 13:49]
:END:
**** TODO By clocking time
:PROPERTIES:
:END:
**** TODO Numerically, beginning of the entry/item
:PROPERTIES:
:END:
**** TODO By scheduled time/date
:PROPERTIES:
:END:
**** TODO By active timestamp
:PROPERTIES:
:END:
**** TODO By any timestamp
:PROPERTIES:
:END:
*** DONE [#A] General sorting routine
CLOSED: [2017-12-25 Mon 22:00] SCHEDULED: <2017-12-18 Mon>
:PROPERTIES:
:ID:       7b077f97-a744-4197-9b4f-015af71ab95f
:END:
:LOGBOOK:
CLOCK: [2017-12-25 Mon 15:14]--[2017-12-25 Mon 15:18] =>  0:04
- Note taken on [2017-12-18 Mon 21:21] \\
  Lambda cannot be recognized in sorting strategy since it is a list. Need to do something with it.
  CLOCK: [2017-12-10 Sun 20:48]--[2017-12-10 Sun 22:40] =>  1:52
  CLOCK: [2017-12-10 Sun 16:24]--[2017-12-10 Sun 17:36] =>  1:12
  CLOCK: [2017-12-10 Sun 16:05]--[2017-12-10 Sun 16:06] =>  0:01
  CLOCK: [2017-12-10 Sun 14:17]--[2017-12-10 Sun 16:02] =>  1:45
  CLOCK: [2017-12-10 Sun 11:35]--[2017-12-10 Sun 13:58] =>  2:23
:END:
#+begin_src emacs-lisp
(defun org-autosort--org-back-to-heading ()
  "Back to current heading or move to the first heading if before the first heading."
  (when (eq major-mode 'org-mode)
    (condition-case err
	(org-back-to-heading)
      (error
       (if (string-match-p "Before first headline at position"
			   (error-message-string err))
           (outline-next-heading)
	 (signal (car err) (cdr err)))))))

(defun org-autosort-sorting-strategy-elementp (elm)
  "Validate element ELM of sorting strategy.  Return (:key ... [:cmp ...]) if element and nil otherwise."
  (pcase elm
    (`(quote val)
     (org-autosort-sorting-strategy-elementp val))
    ((pred functionp)
     (list :key elm))
    ((pred (lambda (arg) (assoc arg org-autosort-functions-alist)))
     (alist-get elm org-autosort-functions-alist))
    ((pred (lambda (arg) (plist-get arg :key)))
     (let ((key (org-autosort-sorting-strategy-elementp (plist-get elm :key)))
	   (cmp (org-autosort-sorting-strategy-elementp (plist-get elm :cmp))))
       (cond ((and key (not cmp)) key)
	     ((and key cmp) (plist-put key :cmp (plist-get cmp :key)))
	     (t nil))))
    (`(,func . ,args)
     (if (functionp func)
	 (list :key elm)
       nil))
    (_ nil)))

(defun org-autosort-sorting-strategyp (sorting-strategy)
  "Validate if SORTING-STRATEGY is valid and return it.
The strategy is ensured to be a list.
Signal user error and return nil if argument is not a sorting strategy."
  (if (not sorting-strategy)
      nil
    (or (let ((res (org-autosort-sorting-strategy-elementp sorting-strategy)))
	  (if res (list res)))
	(let* ((testresult (mapcar (lambda (elm) (cons (org-autosort-sorting-strategy-elementp elm)
						  elm))
				   sorting-strategy))
	       (err-elm (alist-get nil testresult 'none)))
	  (if (equal err-elm 'none)
	      sorting-strategy
	    nil
	    (user-error "Wrong element of sorting strategy: \"%s\" in buffer: %s"
			err-elm (buffer-name)))))))

(defun org-autosort-get-sorting-strategy ()
  "Get sorting strategy at point for the current entry's subtree being sorted."
  (save-excursion
    (org-autosort--org-back-to-heading)
    (condition-case err
	(org-back-to-heading)
      (error (unless (string-match-p "Before first headline" (cadr err)) (signal (car err) (cdr err)))))
    (let ((property (org-entry-get (point) "SORT" 'selective)))
      (pcase property
	('t (org-autosort-sorting-strategyp org-autosort-global-sorting-strategy))
	('nil (and org-autosort-sort-all
		   (org-autosort-sorting-strategyp org-autosort-global-sorting-strategy)))
	("" nil)
	('none nil)
	(_ (if (= (cdr (read-from-string property))
		  (length property))
	       (org-autosort-sorting-strategyp (car (read-from-string property)))
	     (user-error "Cannot read :SORT: property: \"%s\" in buffer: %s" property (buffer-name))
	     nil))))))

(defun org-autosort-construct-get-value-function-atom (sorting-strategy-elm)
  "Construct get-value function for single element of sorting strategy (SORTING-STRATEGY-ELM)."
  (let ((key (plist-get (org-autosort-sorting-strategy-elementp sorting-strategy-elm) :key)))
    (pcase key
      ((pred functionp)
       key)
      (`(,func . ,args)
       (when (functionp func)
	 (lambda () (apply (car key) (cdr key)))))
      ('nil (lambda () nil)))))

(defun org-autosort-construct-get-value-function ()
  "Return get-value function at point.
This function returns a list of sorting keys."
  (let ((sorting-strategy (org-autosort-get-sorting-strategy)))
    (if sorting-strategy
	(let ((func-list (mapcar #'org-autosort-construct-get-value-function-atom sorting-strategy)))
	  (lambda () (mapcar #'funcall func-list)))
      (lambda () (list nil)))))

(defun org-autosort-construct-cmp-function-atom (sorting-strategy-elm)
  "Construct cmp function for single element of sorting strategy (SORTING-STRATEGY-ELM)."
  (let* ((sorting-strategy-elm (org-autosort-sorting-strategy-elementp sorting-strategy-elm))
	 (cmp (and sorting-strategy-elm
		   (or (plist-get sorting-strategy-elm :cmp)
		       org-autosort-default-cmp-function))))
    (pcase cmp
      ((pred functionp)
       (lambda (a b) (funcall cmp a b)))
      (`(,func . ,args)
       (when (functionp func)
	 (lambda (a b) (apply func a b args))))
      ('nil (lambda (a b) nil)))))

(defun org-autosort-construct-cmp-function ()
  "Return cmp function at point."
  (let ((sorting-strategy (org-autosort-get-sorting-strategy)))
    (if (not sorting-strategy)
	(lambda (lista listb) nil)
      (let ((cmp-func-list (mapcar #'org-autosort-construct-cmp-function-atom sorting-strategy)))
	(lambda (lista listb)
	  (let ((resultlist (seq-mapn (lambda (func a b)
					(cons (funcall func a b)
					      (funcall func b a)))
				      cmp-func-list lista listb)) ; list of cons (a<b . b<a)
		(done nil)
		result)
	    (while (and (not done)
			(not (seq-empty-p resultlist)))
	      (let ((elem (pop resultlist)))
		(unless (and (car elem)
			     (cdr elem)) ; not equal
		  (setq done t)
		  (setq result (car elem)))))
	    result))))))

(defun org-autosort-org-sort-entries-wrapper (&rest args)
  "Run `org-sort-entries' at point with ARGS if nesessary.
Make sure, folding state is not changed."
  (save-excursion
    (org-autosort--org-back-to-heading)
    (when (org-autosort-get-sorting-strategy)
      (let ((subtree-end (save-excursion (org-end-of-subtree)))
	    (next-heading (save-excursion (or (outline-next-heading)
					      (buffer-end +1)))))
	(when (< next-heading subtree-end)
	  (save-excursion
	    (save-restriction
	      (condition-case err
		  (apply #'org-sort-entries args)
		(user-error
		 (unless (string-match-p "Nothing to sort"
					 (error-message-string err))
		   (signal (car err) (cdr err))))))))))))

(defun org-autosort-sort-entries-at-point-nonrecursive ()
  "Sort org-entries at point nonrecursively."
  (interactive)
  (funcall #'org-autosort-org-sort-entries-wrapper
	   nil ?f
	   (org-autosort-construct-get-value-function)
	   (org-autosort-construct-cmp-function)))

(defun org-autosort-sort-entries-at-point-recursive ()
  "Sort org-entries at point recursively."
  (interactive)
  (save-excursion
    (let ((subtree-end))
      (condition-case err
	  (org-back-to-heading)
	(error
	 (if (string-match-p "Before first headline at position"
			     (error-message-string err))
	     (progn
               (outline-next-heading)
	       (setq subtree-end (point-max)))
	   (signal (car err) (cdr err)))))
      (setq subtree-end (or subtree-end
			    (save-excursion (org-end-of-subtree))))
      (while (< (point) subtree-end)
	(funcall #'org-autosort-org-sort-entries-wrapper
		 nil ?f
		 (org-autosort-construct-get-value-function)
		 (org-autosort-construct-cmp-function))
	(outline-next-heading)))))

(defun org-autosort-sort-entries-at-point (&optional ARG)
  "Sort org entries at point.
Sort recursively if invoked with \\[universal-argument]."
  (interactive "P")
  (if (equal ARG '(4))
      (org-autosort-sort-entries-at-point-recursive)
    (org-autosort-sort-entries-at-point-nonrecursive))
  (while (not (eq org-cycle-subtree-status 'folded)) ;; magic constant...
    (org-cycle))
  (outline-show-branches) ;; probably, it should be configurable
  )

(defun org-autosort-sort-entries-in-file ()
  "Sort all entries in the file recursively."
  (interactive)
  (save-excursion
    (beginning-of-buffer)
    (let ((subtree-end (point-max)))
      (while (< (point) subtree-end)
	(funcall #'org-autosort-org-sort-entries-wrapper
		 nil ?f
		 (org-autosort-construct-get-value-function)
		 (org-autosort-construct-cmp-function))
	(outline-next-heading)
        ;; optimise large files with many entries
        (unless org-autosort-sort-all
          (and
	   (search-forward ":SORT:" subtree-end 'noerror)
           (while (and (< (point) subtree-end)
		       (save-excursion
			 (re-search-backward org-property-start-re (save-excursion (org-back-to-heading)) t)
                         (looking-at org-property-drawer-re))
                       (not (string-match ":SORT:" (match-string 0))))
             (search-forward ":SORT:" subtree-end 'noerror))))))
    (outline-hide-sublevels 1)))

(defun org-autosort-sort-entries-in-file-maybe ()
  "Sort all entries in the file recursively if `org-autosort-sort-at-file-open' is not nil."
  (when org-autosort-sort-at-file-open (org-autosort-sort-entries-in-file)))

(add-hook 'org-mode-hook #'org-autosort-sort-entries-in-file-maybe)
#+end_src
*** DONE File epilogue
CLOSED: [2017-12-10 Sun 19:40]
:PROPERTIES:
:ID:       cf53b069-fcbb-45f9-9a80-e05f88d1fec5
:END:
#+begin_src emacs-lisp 
(provide 'org-autosort)

;;; org-autosort.el ends here
#+end_src
** Ideas                                                     :SKIP:NOEXPORT:
:PROPERTIES:
:SORT:     (todo-down)
:END:
*** TODO Sort only items, matching org search regex
:PROPERTIES:
:END:
*** TODO should be able to define alias in sorting strategy
:PROPERTIES:
:CREATED:  [2017-12-18 Mon 20:58]
:END:
:LOGBOOK:
CLOCK: [2017-12-18 Mon 20:58]--[2017-12-18 Mon 20:59] =>  0:01
:END:
*** TODO use local hook in autosort for toggle hooks
:PROPERTIES:
:CREATED:  [2017-12-20 Wed 15:23]
:END:
*** TODO add this functionality? [[http://sachachua.com/blog/2017/12/sorting-org-mode-lists-using-a-sequence-of-regular-expressions/][Sorting Org Mode lists using a sequence of regular expressions  13]] :COMMON:
:PROPERTIES:
:CREATED:  [2017-12-21 Thu 23:50]
:Source:   http://sachachua.com/blog/2017/12/sorting-org-mode-lists-using-a-sequence-of-regular-expressions/
:END:
*** TODO Add trigger to not read lisp from sort property it is not safe
:PROPERTIES:
:CREATED:  [2017-12-25 Mon 22:05]
:END:
*** TODO sort signalling error -resolve [[id:e9132d5f-cc43-4bae-b9ed-244e21e8b8cc][Test test]]
:PROPERTIES:
:CREATED: [2017-12-29 Fri 22:37]
:END:
:LOGBOOK:
CLOCK: [2017-12-29 Fri 22:37]--[2017-12-29 Fri 22:38] =>  0:01
:END:
*** TODO Add trigger to not read lisp from sort property it is not safe
:PROPERTIES:
:CREATED:  [2017-12-25 Mon 22:05]
:END:
*** TODO it appears that it attempts to sort something here: [[file:~/.emacs.d/config.org]]. Should not be the case
:PROPERTIES:
:CREATED: [2018-10-14 Sun 00:07]
:END:
:LOGBOOK:
CLOCK: [2018-10-14 Sun 00:07]--[2018-10-14 Sun 00:08] =>  0:01
:END:
*** TODO Add an option to sort by an regexp - the entries matching regexp are shown first
:PROPERTIES:
:CREATED:  [2018-10-20 Sat 16:46]
:END:
*** NEXT [#A] reply to this about org-autosort email |- Maikol Solís <notifications@github.com>: [yantar92/org-autosort] Upload to MELPA (#2) :EMAIL:
SCHEDULED: <2019-04-05 Fri>
:PROPERTIES:
:SHOWFROMDATE: 2019-04-21
:END:
:PROPERTIES:
:CREATED: [2019-02-28 Thu 09:15]
:EMAIL-SOURCE: notmuch:id:yantar92/org-autosort/issues/2@github.com
:SHOWFROMDATE: 2019-03-28 19:00
:SHOWFROMDATE: 2019-03-05
:END:
:LOGBOOK:
CLOCK: [2019-04-21 Sun 18:45]
CLOCK: [2019-04-21 Sun 18:25]--[2019-04-21 Sun 18:35] =>  0:10
CLOCK: [2019-03-29 Fri 22:00]--[2019-03-29 Fri 22:52] =>  0:52
CLOCK: [2019-03-18 Mon 18:24]--[2019-03-18 Mon 18:27] =>  0:03
- State "NEXT"       from "TODO"       [2019-02-28 Thu 09:15]
:END:
[2019-02-28 Thu 09:15]

https://github.com/melpa/melpa/blob/master/CONTRIBUTING.org
**** NEXT [#A] Make sure the code conventions are met
SCHEDULED: <2019-04-22 Mon>
:PROPERTIES:
:CREATED:  [2019-04-21 Sun 18:45]
:END:
**** NEXT Check metadata
:PROPERTIES:
:CREATED:  [2019-04-21 Sun 18:45]
:END:
**** NEXT Lint everything
:PROPERTIES:
:CREATED:  [2019-04-21 Sun 18:45]
:END:
**** NEXT Tag commits
:PROPERTIES:
:CREATED:  [2019-04-21 Sun 18:45]
:END:
**** NEXT Make recepy
:PROPERTIES:
:CREATED:  [2019-04-21 Sun 18:46]
:END:
**** NEXT Pull request on Melpa
:PROPERTIES:
:CREATED:  [2019-04-21 Sun 18:46]
:END:

** NEXT Versions                                           :NOEXPORT:NOARCHIVE:
:PROPERTIES:
:CREATED:  [2017-12-28 Thu 23:15]
:END:
:LOGBOOK:
CLOCK: [2017-12-29 Fri 05:59]--[2017-12-29 Fri 06:00] =>  0:01
:END:
*** NEXT 1.0
:PROPERTIES:
:CREATED:  [2017-12-28 Thu 23:15]
:ORDERED:  t
:END:
:LOGBOOK:
CLOCK: [2017-12-29 Fri 05:50]--[2017-12-29 Fri 05:59] =>  0:09
:END:
- =org-agenda-sorting-strategy= like sorting specs <<v1.1>>
- sort entries in file on open <<v1.2>>
- sort entries in place <<v1.3>>
- sort lists <<v1.4>>
- update the sort on changes, including creating new entries <<v1.6>>
- interactive sort via subtree agenda invocation, similar to filtering
  <<v1.7>>

**** DONE [#A] 0.1
CLOSED: [2018-09-20 Thu 22:17]
:PROPERTIES:
:CREATED:  [2017-12-28 Thu 23:16]
:END:
:LOGBOOK:
- State "DONE"       from "NEXT"       [2018-09-20 Thu 22:17]
:END:
[[v1.1][specs]], [[v1.2][on open]]
***** DONE 0.10
CLOSED: [2018-01-01 Mon 13:21]
:PROPERTIES:
:CREATED:  [2018-01-01 Mon 13:18]
:END:
:LOGBOOK:
- State "DONE"       from              [2018-01-01 Mon 13:21]
:END:
****** DONE allow to define sort criteria like a lisp function in the properties field
CLOSED: [2017-12-12 Tue 21:18]
:PROPERTIES:
:END:
****** CANCELLED Take care about exact position for =C-c C-c= (say, we are inside the table - user may not want to sort) :CANCELLED:
CLOSED: [2017-12-11 Mon 16:56]
:PROPERTIES:
:END:
:LOGBOOK:
- State "CANCELLED"  from "TODO"          [2017-12-11 Mon 16:56]
:END:
****** CANCELLED do not use org-sort, because it does not allow to combine sorts (i.e. sort by one criteria, if equal - by other) :CANCELLED:
CLOSED: [2017-12-12 Tue 21:18]
:PROPERTIES:
:END:
:LOGBOOK:
- State "CANCELLED"  from "TODO"          [2017-12-12 Tue 21:18] \\
  Made a proper wrapper
:END:
***** DONE 0.11
CLOSED: [2018-01-01 Mon 13:21]
:PROPERTIES:
:CREATED:  [2018-01-01 Mon 13:18]
:END:
:LOGBOOK:
- State "DONE"       from              [2018-01-01 Mon 13:21]
:END:
****** DONE put buffer name in error report for wrong element of sorting strategy
CLOSED: [2017-12-25 Mon 21:59]
:PROPERTIES:
:CREATED:  [2017-12-18 Mon 20:57]
:END:
****** DONE Handle nothing to sort
CLOSED: [2017-12-11 Mon 16:56] SCHEDULED: <2017-12-11 Mon>
:PROPERTIES:
:END:
:LOGBOOK:
CLOCK: [2017-12-11 Mon 16:24]--[2017-12-11 Mon 16:56] =>  0:32
CLOCK: [2017-12-11 Mon 15:58]--[2017-12-11 Mon 16:08] =>  0:10
:END:
****** DONE make interactive versions of sorting functions
CLOSED: [2017-12-25 Mon 21:59]
:PROPERTIES:
:END:
****** DONE rewrite sorting strategy to use assoc lists
CLOSED: [2017-12-25 Mon 21:58]
:PROPERTIES:
:CREATED:  [2017-12-18 Mon 21:21]
:END:
:LOGBOOK:
CLOCK: [2017-12-25 Mon 15:18]--[2017-12-25 Mon 21:58] =>  6:40
CLOCK: [2017-12-18 Mon 21:21]--[2017-12-18 Mon 21:25] =>  0:04
:END:
****** DONE do not raise error but put a message and do not sort on wrong :SORTING: format
CLOSED: [2017-12-25 Mon 22:00]
:PROPERTIES:
:CREATED:  [2017-12-23 Sat 11:21]
:END:
***** DONE 0.12
CLOSED: [2018-09-20 Thu 16:00] SCHEDULED: <2018-07-17 Tue>
:PROPERTIES:
:CREATED:  [2018-01-01 Mon 13:21]
:END:
:LOGBOOK:
- State "DONE"       from "NEXT"       [2018-09-20 Thu 16:00]
:END:
****** DONE get rid of annoying unfolding after =org-sort=
CLOSED: [2018-09-20 Thu 15:47]
:PROPERTIES:
:CREATED:  [2017-12-18 Mon 20:54]
:END:
:LOGBOOK:
- State "DONE"       from "NEXT"       [2018-09-20 Thu 15:47]
CLOCK: [2018-09-20 Thu 15:31]--[2018-09-20 Thu 15:47] =>  0:16
CLOCK: [2017-12-18 Mon 20:57]--[2017-12-18 Mon 20:58] =>  0:01
CLOCK: [2017-12-18 Mon 20:54]--[2017-12-18 Mon 20:57] =>  0:03
:END:
****** CANCELLED add hooks to to autosort                    :CANCELLED:
CLOSED: [2018-09-20 Thu 15:59]
:PROPERTIES:
:CREATED:  [2017-12-18 Mon 09:56]
:SUMMARY:  One can use hooks for org-sort
:END:
:LOGBOOK:
- State "CANCELLED"  from "TODO"       [2018-09-20 Thu 15:59]
:END:
**** NEXT 0.2
:PROPERTIES:
:CREATED:  [2017-12-28 Thu 23:16]
:END:
:LOGBOOK:
CLOCK: [2018-10-07 Sun 16:54]--[2018-10-07 Sun 16:56] =>  0:02
- State "NEXT"       from "TODO"       [2018-09-20 Thu 22:17]
- State "TODO"       from "NEXT"          [2018-01-01 Mon 13:22]
:END:
[[v1.3][interactive in place]],[[v1.4][list sort]]
***** DONE [#C] Change =org-map-entries= to faster function
CLOSED: [2018-10-07 Sun 16:54] SCHEDULED: <2018-09-22 Sat>
:PROPERTIES:
:CREATED:  [2018-09-12 Wed 23:20]
:END:
:LOGBOOK:
- State "DONE"       from "NEXT"       [2018-10-07 Sun 16:54]
CLOCK: [2018-10-07 Sun 16:33]--[2018-10-07 Sun 16:54] =>  0:21
:END:
***** NEXT sort lists
SCHEDULED: <2019-02-02 Sat>
      :PROPERTIES:
      :CREATED:  [2018-10-08 Mon 13:50]
      :END:
      :LOGBOOK:
      - State "NEXT"       from "TODO"       [2018-10-08 Mon 13:51]
      :END:
**** TODO 0.3
:PROPERTIES:
:CREATED:  [2017-12-28 Thu 23:16]
:END:
[[v1.6][adaptive sort update]]
***** TODO Share on reddit
:PROPERTIES:
:CREATED:  [2017-12-29 Fri 05:57]
:END:
**** TODO 0.4
:PROPERTIES:
:CREATED:  [2017-12-28 Thu 23:16]
:END:
[[v1.7][interactive sort via agenda]]
**** 0.5
:PROPERTIES:
:CREATED:  [2017-12-28 Thu 23:16]
:END:
**** 0.6
:PROPERTIES:
:CREATED:  [2017-12-28 Thu 23:16]
:END:
**** 0.7
:PROPERTIES:
:CREATED:  [2017-12-28 Thu 23:16]
:END:
**** 0.8
:PROPERTIES:
:CREATED:  [2017-12-28 Thu 23:16]
:END:
**** 0.9
:PROPERTIES:
:CREATED:  [2017-12-28 Thu 23:16]
:END:
**** 1.0
:PROPERTIES:
:CREATED:  [2017-12-28 Thu 23:16]
:END:
